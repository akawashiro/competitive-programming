#include <stdio.h>
#include <cstring>
#include <algorithm>
#define INF 100
using namespace std;

int key(int m,int k){return m*23+k;}
int n;
int a[25];
int pre[25][25];
char memo[(1<<23)*23];
int best=INF;

int popCount(int _mask){
     int r=0;
     for(int i=0;i<31;i++)if(_mask & (1<<i))r++;
     return r;
}

int rec(int b,int k){
     int ke=key(b,k);
     if(k==n){
	  int r=__builtin_popcount(b);
	  best=min(r,best);
	  return r;
     }else if(memo[ke]!=-1)
	  return memo[ke];
     else if(best<__builtin_popcount(b))
      return memo[ke]=INF;
     else{
      int r=INF;
	  for(int i=0;i<n;i++)
	       if(b&(1<<i)){
		    int j=pre[i][k];
			 if((b&1<<j)){
			      for(int l=0;l<k;l++)
				   if(b&(1<<l))
					r=min(r,rec(b-(1<<l)+(1<<k),k+1));
			      r=min(r,rec(b+(1<<k),k+1));
			 }
	       }
	  return memo[ke]=r;
     }
}

int main(){
     scanf("%d",&n);
     for(int i=0;i<n;i++)scanf("%d",a+i);
     memset(pre,-1,sizeof(pre));
     memset(memo,-1,sizeof(memo));
     for(int i=0;i<n;i++)
	  for(int j=0;j<n;j++)
	       for(int k=0;k<n;k++)
		    if(a[i]+a[k]==a[j])
			 pre[i][j]=k;
     int ans=rec(1,1);
     if(ans!=INF)printf("%d\n",ans);
     else printf("%d\n",-1);
     return 0;
}
